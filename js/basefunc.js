// üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API
const API_CONFIG = {
  ACCESS_TOKEN:
    "1bb263451bb263451bb2634552188a4cfe11bb21bb26345732659ed5d055a6b40f69c20",
  BASE_URL: "https://api.vk.com/method/",
  VERSION: "5.131",
  BATCH_SIZE: 50,
  MIN_DELAY: 5000, // –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è
  MAX_DELAY: 8000,
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allResults = [];
let filteredResults = [];
let friendsList = new Set(); // –°–ø–∏—Å–æ–∫ ID –¥—Ä—É–∑–µ–π
let friendsData = {}; // –î–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–∑—å—è—Ö (ID -> –∏–º—è)
let processingStats = {
  total: 0,
  processed: 0,
  errors: 0,
  duplicates: 0,
  invalidUrls: 0,
  resolveErrors: 0,
  resolveAttempts: 0,
  apiErrors: 0,
  friendsLoaded: 0,
};
let currentView = "cards";
let currentSort = { field: "first_name", order: "asc" };

// –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
let requestCount = 0;
let lastMinuteTimestamp = Date.now();

function getAdaptiveDelay() {
  const now = Date.now();
  if (now - lastMinuteTimestamp > 60000) {
    requestCount = 0;
    lastMinuteTimestamp = now;
  }
  requestCount++;

  let delay =
    Math.floor(
      Math.random() * (API_CONFIG.MAX_DELAY - API_CONFIG.MIN_DELAY + 1)
    ) + API_CONFIG.MIN_DELAY;

  if (requestCount > 30) delay *= 2;

  return Math.min(delay, 60000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener("DOMContentLoaded", function () {
  initEventHandlers();
  console.log("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥—Ä—É–∑–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
});

function initEventHandlers() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞
  document.getElementById("csvFile").addEventListener("change", function (e) {
    const file = e.target.files[0];
    if (file) {
      showFileStatus("mainFileStatus", `–ó–∞–≥—Ä—É–∂–µ–Ω: ${file.name}`, "success");
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      checkAndProcessFiles();
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π
  document
    .getElementById("friendsFile")
    .addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (file) {
        processFriendsFile(file);
      }
    });

  document
    .getElementById("groupBySelect")
    .addEventListener("change", updateDisplay);
  document.getElementById("sortBySelect").addEventListener("change", (e) => {
    currentSort.field = e.target.value;
    updateDisplay();
  });
  document.getElementById("sortOrderSelect").addEventListener("change", (e) => {
    currentSort.order = e.target.value;
    updateDisplay();
  });
  document.getElementById("searchInput").addEventListener("input", (e) => {
    filterResults(e.target.value);
    updateDisplay();
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π
async function processFriendsFile(file) {
  try {
    showStatus("info", "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π...");

    const text = await file.text();
    const lines = text.split("\n").filter((line) => line.trim());

    if (lines.length === 0) {
      showStatus("error", "–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π –ø—É—Å—Ç");
      return;
    }

    friendsList.clear();
    friendsData = {};
    let friendsCount = 0;
    let errors = 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    const firstLine = parseCSVLine(lines[0]);
    console.log("–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:", firstLine);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const hasHeaders = firstLine.some(
      (cell) =>
        cell.toLowerCase().includes("profile") ||
        cell.toLowerCase().includes("url") ||
        cell.toLowerCase().includes("name") ||
        cell.toLowerCase().includes("link") ||
        cell.toLowerCase().includes("id")
    );

    const startIndex = hasHeaders ? 1 : 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const sampleLine = parseCSVLine(lines[startIndex] || lines[0]);
    console.log("–û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö:", sampleLine);

    let urlIndex = -1;
    let nameIndex = -1;
    let statusIndex = -1;

    if (hasHeaders) {
      // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
      const headers = firstLine.map((h) => h.toLowerCase().replace(/"/g, ""));

      urlIndex = headers.findIndex(
        (h) =>
          h.includes("profile") ||
          h.includes("url") ||
          h.includes("link") ||
          h.includes("id")
      );

      nameIndex = headers.findIndex(
        (h) => h.includes("name") || h.includes("–∏–º—è")
      );

      statusIndex = headers.findIndex(
        (h) =>
          h.includes("status") || h.includes("friend") || h.includes("—Å—Ç–∞—Ç—É—Å")
      );
    } else {
      // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      for (let i = 0; i < sampleLine.length; i++) {
        const cell = sampleLine[i].toLowerCase();

        // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç vk.com –∏–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ ID
        if (
          cell.includes("vk.com") ||
          cell.includes("vkontakte") ||
          /^\d+$/.test(cell.replace(/"/g, ""))
        ) {
          urlIndex = i;
        }
        // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è (–±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü—ã)
        else if (
          /[–∞-—è—ëa-z]/i.test(cell) &&
          !cell.includes("friend") &&
          !cell.includes("—Å—Ç–∞—Ç—É—Å")
        ) {
          if (nameIndex === -1) nameIndex = i; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–º—è
        }
        // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å
        else if (cell.includes("friend") || cell.includes("—Å—Ç–∞—Ç—É—Å")) {
          statusIndex = i;
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ URL, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    if (urlIndex === -1) urlIndex = 0;

    console.log(
      `üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: URL –≤ —Å—Ç–æ–ª–±—Ü–µ ${urlIndex}, –∏–º–µ–Ω–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ ${nameIndex}, —Å—Ç–∞—Ç—É—Å –≤ —Å—Ç–æ–ª–±—Ü–µ ${statusIndex}`
    );

    for (let i = startIndex; i < Math.min(lines.length, startIndex + 5); i++) {
      const parts = parseCSVLine(lines[i]);
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i}:`, parts);
    }

    for (let i = startIndex; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;

      const parts = parseCSVLine(line);
      if (parts.length === 0) continue;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = parts[urlIndex]
        ? parts[urlIndex].replace(/"/g, "").trim()
        : "";

      if (!userData) {
        continue;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (i % 50 === 0) {
        showStatus(
          "info",
          `–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–∑–µ–π: —Å—Ç—Ä–æ–∫–∞ ${i} –∏–∑ ${lines.length}...`
        );
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL –∏–ª–∏ –ø—Ä—è–º–æ–≥–æ ID
      const userId = await extractUserIdFromProfile(userData);

      if (userId) {
        friendsList.add(userId);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if (nameIndex !== -1 && parts[nameIndex]) {
          const name = parts[nameIndex].replace(/"/g, "").trim();
          if (name && name !== "friend" && name !== "—Å—Ç–∞—Ç—É—Å") {
            friendsData[userId] = name;
          }
        }

        friendsCount++;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
        if (friendsCount % 50 === 0) {
          showStatus("info", `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–∑–µ–π: ${friendsCount}...`);
        }
      } else {
        errors++;
        if (errors <= 10) {
          console.warn(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Ç—Ä–æ–∫–∏ ${
              i + 1
            }: "${userData}" (—á–∞—Å—Ç–∏: ${JSON.stringify(parts)})`
          );
        }
      }
    }

    processingStats.friendsLoaded = friendsCount;

    showFileStatus(
      "friendsFileStatus",
      `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${friendsCount}${
        errors > 0 ? ` (–æ—à–∏–±–æ–∫: ${errors})` : ""
      }`,
      "success"
    );

    showStatus(
      "success",
      `‚úÖ –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω: ${friendsCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π${
        errors > 0 ? ` (–ø—Ä–æ–ø—É—â–µ–Ω–æ ${errors} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)` : ""
      }`
    );

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    checkAndProcessFiles();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –¥—Ä—É–∑–µ–π:", error);
    showStatus(
      "error",
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π: ${error.message}`
    );
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
function checkAndProcessFiles() {
  const mainFile = document.getElementById("csvFile").files[0];
  const friendsFile = document.getElementById("friendsFile").files[0];

  if (mainFile && friendsList.size > 0) {
    processCSV(mainFile);
  } else if (mainFile && !friendsFile) {
    showStatus(
      "warning",
      "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–∂–±—ã"
    );
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV
async function processCSV(file) {
  showStatus("info", "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞...");

  const text = await file.text();
  const lines = text.split("\n").filter((line) => line.trim());

  if (lines.length === 0) {
    showStatus("error", "–§–∞–π–ª –ø—É—Å—Ç");
    return;
  }

  const {
    userIds,
    userNames,
    invalidRows: parseErrors,
    emptyRows,
  } = await parseCSVData(lines);
  const uniqueIds = removeDuplicates(userIds);

  displayParsingReport(
    lines.length - 1,
    emptyRows,
    parseErrors,
    uniqueIds.length
  );
  initProcessingStats(uniqueIds.length);

  await processUsersOptimized(uniqueIds, userNames);
}

// –ü–∞—Ä—Å–∏–Ω–≥ CSV
async function parseCSVData(lines) {
  const headers = parseCSVLine(lines[0]).map((h) =>
    h.toLowerCase().replace(/"/g, "")
  );
  const { userDataIndex, nameIndex } = findColumnIndices(headers);

  if (userDataIndex === -1) {
    throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å ID/URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
  }

  const userIds = [];
  const userNames = {};
  const invalidRows = [];
  let emptyRows = 0;

  for (let i = 1; i < lines.length; i++) {
    const cols = parseCSVLine(lines[i]);

    if (!cols[userDataIndex] || !cols[userDataIndex].trim()) {
      emptyRows++;
      continue;
    }

    const userData = cols[userDataIndex].replace(/"/g, "").trim();

    if (i % 50 === 0) {
      showStatus(
        "info",
        `–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫–∏ ${i} –∏–∑ ${lines.length - 1}... (–Ω–∞–π–¥–µ–Ω–æ ID: ${
          userIds.length
        })`
      );
    }

    const userId = await extractUserIdFromProfile(userData);

    if (userId) {
      userIds.push(userId);
      if (nameIndex !== -1 && cols[nameIndex]) {
        const name = cols[nameIndex].replace(/"/g, "").trim();
        if (name) userNames[userId] = name;
      }
    } else {
      invalidRows.push({
        row: i,
        data: userData,
        originalData: cols[userDataIndex],
      });
      processingStats.invalidUrls++;
    }
  }

  return { userIds, userNames, invalidRows, emptyRows };
}

// –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
function findColumnIndices(headers) {
  const urlColumns = ["profile_url", "url", "link", "vk_url", "vk_link"];
  const idColumns = ["id", "user_id", "userid", "vk_id", "vkid"];
  const nameColumns = ["name", "username", "full_name", "–∏–º—è"];

  let userDataIndex = -1;
  let nameIndex = -1;

  for (let col of urlColumns) {
    const index = headers.findIndex((h) => h.includes(col));
    if (index !== -1) {
      userDataIndex = index;
      break;
    }
  }

  if (userDataIndex === -1) {
    for (let col of idColumns) {
      const index = headers.findIndex((h) => h.includes(col));
      if (index !== -1) {
        userDataIndex = index;
        break;
      }
    }
  }

  for (let col of nameColumns) {
    const index = headers.findIndex((h) => h.includes(col));
    if (index !== -1) {
      nameIndex = index;
      break;
    }
  }

  return { userDataIndex, nameIndex };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function processUsersOptimized(userIds, csvNames = {}) {
  document.getElementById("progressContainer").style.display = "block";
  document.getElementById("statsContainer").style.display = "grid";
  document.getElementById("controlsSection").style.display = "block";

  allResults = [];
  const resolvedIds = userIds.filter((id) => id);
  const batches = createBatches(resolvedIds, API_CONFIG.BATCH_SIZE);

  for (let i = 0; i < batches.length; i++) {
    const batch = batches[i];

    try {
      showStatus(
        "info",
        `–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${i + 1}/${batches.length}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ${
          i * API_CONFIG.BATCH_SIZE + 1
        }-${Math.min((i + 1) * API_CONFIG.BATCH_SIZE, resolvedIds.length)} –∏–∑ ${
          resolvedIds.length
        }...`
      );

      const users = await fetchUsersBatchOptimized(batch, csvNames);
      allResults.push(...users);
      processingStats.processed += users.length;

      updateProgress();
      updateStats();
      await sleep(getAdaptiveDelay());
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞:", error);
      processingStats.errors += batch.length;
      processingStats.apiErrors += batch.length;

      showStatus("error", `–û—à–∏–±–∫–∞ –±–∞—Ç—á–∞ ${i + 1}: ${error.message}`);
      await sleep(getAdaptiveDelay());
    }
  }

  // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π
  if (friendsList.size > 0) {
    checkFriendshipFromList(allResults);
  }

  finishProcessing();
}

// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π
function checkFriendshipFromList(users) {
  showStatus(
    "info",
    `üîç –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–µ—Ä–æ–≤ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏–∑ ${friendsList.size} –¥—Ä—É–∑–µ–π...`
  );

  let friendsFound = 0;
  let notFriends = 0;

  users.forEach((user) => {
    const userId = user.id.toString();

    if (friendsList.has(userId)) {
      user.friend_status = "–î—Ä—É–∑—å—è";

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
      if (
        friendsData[userId] &&
        friendsData[userId] !== user.first_name + " " + user.last_name
      ) {
        user.friend_list_name = friendsData[userId];
      }

      friendsFound++;
      console.log(`‚úÖ –õ–∞–π–∫–µ—Ä ${user.id} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π`);
    } else {
      user.friend_status = "–ù–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π";
      notFriends++;
    }
  });

  showStatus(
    "success",
    `üèÅ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î—Ä—É–∑–µ–π —Å—Ä–µ–¥–∏ –ª–∞–π–∫–µ—Ä–æ–≤: ${friendsFound}, –Ω–µ –¥—Ä—É–∑–µ–π: ${notFriends}`
  );
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function fetchUsersBatchOptimized(userIds, csvNames = {}) {
  return new Promise((resolve, reject) => {
    const callbackName = `vk_users_callback_${Date.now()}_${Math.random()
      .toString(36)
      .substr(2, 9)}`;

    window[callbackName] = function (response) {
      document.head.removeChild(script);
      delete window[callbackName];

      if (response.error) {
        reject(new Error(response.error.error_msg));
        return;
      }

      if (!response.response || !Array.isArray(response.response)) {
        reject(new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API"));
        return;
      }

      const users = response.response.map((user) => {
        return createUserObject(user, csvNames);
      });

      resolve(users);
    };

    const script = document.createElement("script");
    const fields =
      "city,photo_50,can_access_closed,is_closed,domain,screen_name,last_seen,online";
    script.src = `${API_CONFIG.BASE_URL}users.get?user_ids=${userIds.join(
      ","
    )}&fields=${fields}&access_token=${API_CONFIG.ACCESS_TOKEN}&v=${
      API_CONFIG.VERSION
    }&callback=${callbackName}`;

    script.onerror = function () {
      document.head.removeChild(script);
      delete window[callbackName];
      reject(new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞"));
    };

    document.head.appendChild(script);

    setTimeout(() => {
      if (window[callbackName]) {
        document.head.removeChild(script);
        delete window[callbackName];
        reject(new Error("Timeout –∑–∞–ø—Ä–æ—Å–∞"));
      }
    }, 15000);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createUserObject(user, csvNames) {
  let profileStatus = "–û—Ç–∫—Ä—ã—Ç—ã–π";
  if (user.is_closed) {
    profileStatus = user.can_access_closed ? "–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π" : "–ó–∞–∫—Ä—ã—Ç—ã–π";
  }

  const csvName = csvNames[user.id] || csvNames[user.domain] || null;
  const firstName = csvName ? csvName.split(" ")[0] : user.first_name;
  const lastName = csvName
    ? csvName.split(" ").slice(1).join(" ")
    : user.last_name;

  return {
    id: user.id,
    first_name: firstName,
    last_name: lastName,
    photo: user.photo_50,
    city: user.city ? user.city.title : null,
    profile_status: profileStatus,
    is_closed: user.is_closed || false,
    domain: user.domain || user.screen_name || null,
    csv_name: csvName,
    friend_status: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
    friend_list_name: null, // –ò–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
    vk_url: `https://vk.com/id${user.id}`,
    last_seen: user.last_seen
      ? new Date(user.last_seen.time * 1000).toLocaleDateString("ru-RU")
      : null,
    online: user.online || 0,
  };
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
async function extractUserIdFromProfile(userData) {
  if (!userData || userData === "") return null;

  userData = userData.trim().replace(/['"]/g, "");

  // –ü—Ä—è–º–æ–π —á–∏—Å–ª–æ–≤–æ–π ID
  if (/^\d+$/.test(userData)) {
    return userData;
  }

  let username = null;

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username
  const patterns = [
    // –ü–æ–ª–Ω—ã–µ URL —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    /(?:https?:\/\/)?(?:www\.|m\.)?vk\.com\/([^\/\?&#,]+)/i,
    /(?:https?:\/\/)?(?:www\.|m\.)?vkontakte\.ru\/([^\/\?&#,]+)/i,

    // –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ–æ—Ä–º—ã
    /(?:www\.|m\.)?vk\.com\/([^\/\?&#,]+)/i,
    /vk\.com\/([^\/\?&#,]+)/i,

    // ID —Ñ–æ—Ä–º–∞—Ç
    /^id(\d+)$/i,

    // –ü—Ä–æ—Å—Ç–æ–π username –±–µ–∑ –¥–æ–º–µ–Ω–∞
    /^([a-zA-Z0-9_.-]+)$/,
  ];

  for (let pattern of patterns) {
    const match = userData.match(pattern);
    if (match && match[1]) {
      username = match[1].toLowerCase().trim();
      break;
    }
  }

  if (!username) {
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑: "${userData}"`);
    return null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ id —Ñ–æ—Ä–º–∞—Ç–∞
  if (username.startsWith("id")) {
    const idMatch = username.match(/^id(\d+)$/);
    if (idMatch && idMatch[1]) return idMatch[1];
  }

  // –ü—Ä—è–º–æ–π —á–∏—Å–ª–æ–≤–æ–π ID
  if (/^\d+$/.test(username)) return username;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è username
  if (username.length < 3 || username.length > 32) {
    console.warn(`Username "${username}" –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é –¥–ª–∏–Ω—É`);
    return null;
  }

  if (!/^[a-zA-Z0-9_.-]+$/.test(username)) {
    console.warn(`Username "${username}" —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã`);
    return null;
  }

  // –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö username'–æ–≤
  const reservedUsernames = [
    "id",
    "admin",
    "api",
    "www",
    "m",
    "mobile",
    "vk",
    "vkontakte",
    "app",
    "apps",
    "dev",
    "help",
    "support",
    "page",
    "pages",
    "group",
    "groups",
    "club",
    "public",
    "wall",
    "photo",
    "video",
    "audio",
    "doc",
    "market",
    "album",
    "albums",
    "login",
    "logout",
    "register",
    "signup",
    "signin",
    "settings",
    "privacy",
    "terms",
    "about",
    "contact",
    "feedback",
    "bug",
    "report",
    "security",
    "account",
  ];

  if (reservedUsernames.includes(username)) {
    console.warn(`Username "${username}" –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω`);
    return null;
  }

  try {
    const attemptNumber = processingStats.resolveAttempts || 0;
    if (attemptNumber > 0) {
      let delay = 200;
      if (attemptNumber % 10 === 0) delay = 400;
      if (attemptNumber % 25 === 0) delay = 800;
      await sleep(delay);
    }

    processingStats.resolveAttempts =
      (processingStats.resolveAttempts || 0) + 1;
    const resolvedId = await resolveUsernameWithJSONP(username);

    if (!resolvedId) {
      processingStats.resolveErrors++;
    }

    return resolvedId;
  } catch (error) {
    processingStats.resolveErrors++;
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–æ–ª–≤–µ username ${username}:`, error);
    return null;
  }
}

// –†–µ–∑–æ–ª–≤ username —á–µ—Ä–µ–∑ JSONP
function resolveUsernameWithJSONP(username) {
  return new Promise((resolve) => {
    const callbackName = `vk_callback_${Date.now()}_${Math.random()
      .toString(36)
      .substr(2, 9)}`;

    window[callbackName] = function (response) {
      document.head.removeChild(script);
      delete window[callbackName];

      if (response.error) {
        console.warn(`–û—à–∏–±–∫–∞ —Ä–µ–∑–æ–ª–≤–∞ username "${username}":`, response.error);
        resolve(null);
        return;
      }

      if (response.response) {
        if (response.response.type === "user" && response.response.object_id) {
          console.info(
            `‚úÖ Username "${username}" ‚Üí ID: ${response.response.object_id}`
          );
          resolve(response.response.object_id.toString());
        } else if (response.response.type === "group") {
          console.warn(`Username "${username}" –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          resolve(null);
        } else if (
          response.response.type === "application" ||
          response.response.type === "vk_app"
        ) {
          console.warn(
            `Username "${username}" –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é VK, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`
          );
          resolve(null);
        } else {
          console.warn(
            `Username "${username}" –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: ${response.response.type}`
          );
          resolve(null);
        }
      } else {
        console.info(`Username "${username}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        resolve(null);
      }
    };

    const script = document.createElement("script");
    script.src = `${
      API_CONFIG.BASE_URL
    }utils.resolveScreenName?screen_name=${encodeURIComponent(
      username
    )}&access_token=${API_CONFIG.ACCESS_TOKEN}&v=${
      API_CONFIG.VERSION
    }&callback=${callbackName}`;

    script.onerror = function () {
      document.head.removeChild(script);
      delete window[callbackName];
      console.error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–æ–ª–≤–µ username "${username}"`);
      resolve(null);
    };

    document.head.appendChild(script);

    setTimeout(() => {
      if (window[callbackName]) {
        document.head.removeChild(script);
        delete window[callbackName];
        console.warn(`Timeout –ø—Ä–∏ —Ä–µ–∑–æ–ª–≤–µ username "${username}"`);
        resolve(null);
      }
    }, 15000);
  });
}

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –°–¢–†–£–ö–¢–£–†–´ CSV
function analyzeCSVStructure(lines, maxLinesToAnalyze = 10) {
  console.log("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV —Ñ–∞–π–ª–∞:");

  for (let i = 0; i < Math.min(lines.length, maxLinesToAnalyze); i++) {
    const parts = parseCSVLine(lines[i]);
    console.log(
      `–°—Ç—Ä–æ–∫–∞ ${i}:`,
      parts.map((part, idx) => `[${idx}] "${part}"`)
    );
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
  const columnCounts = lines
    .slice(0, 10)
    .map((line) => parseCSVLine(line).length);
  const mostCommonCount = columnCounts
    .sort(
      (a, b) =>
        columnCounts.filter((v) => v === a).length -
        columnCounts.filter((v) => v === b).length
    )
    .pop();

  console.log(`üìä –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: ${mostCommonCount}`);

  return mostCommonCount;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function parseCSVLine(line) {
  const result = [];
  let current = "";
  let inQuotes = false;
  let i = 0;

  while (i < line.length) {
    const char = line[i];

    if (char === '"') {
      if (inQuotes && line[i + 1] === '"') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è
        current += '"';
        i += 2;
        continue;
      } else {
        inQuotes = !inQuotes;
      }
    } else if (char === "," && !inQuotes) {
      result.push(current.trim());
      current = "";
    } else {
      current += char;
    }
    i++;
  }

  result.push(current.trim());
  return result;
}

function removeDuplicates(userIds) {
  const uniqueIds = [];
  const seenIds = new Set();

  userIds.forEach((id) => {
    if (!seenIds.has(id)) {
      uniqueIds.push(id);
      seenIds.add(id);
    } else {
      processingStats.duplicates++;
    }
  });

  return uniqueIds;
}

function createBatches(array, batchSize) {
  const batches = [];
  for (let i = 0; i < array.length; i += batchSize) {
    batches.push(array.slice(i, i + batchSize));
  }
  return batches;
}

function showFileStatus(elementId, message, type) {
  const element = document.getElementById(elementId);
  element.textContent = message;
  element.className = `file-status ${type}`;
  element.style.display = "block";
}

function displayParsingReport(totalLines, emptyRows, invalidRows, uniqueCount) {
  let reportMessage = `
üìä –ê–Ω–∞–ª–∏–∑ CSV —Å –ª–∞–π–∫–µ—Ä–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω:
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${totalLines}
‚Ä¢ –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: ${emptyRows}
‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL/ID: ${processingStats.invalidUrls}
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${processingStats.duplicates}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∞–π–∫–µ—Ä–æ–≤: ${uniqueCount}
${
  friendsList.size > 0
    ? `‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${processingStats.friendsLoaded}`
    : ""
}
  `.trim();

  if (invalidRows.length > 0) {
    reportMessage += `\n\n‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫:`;
    invalidRows.slice(0, 5).forEach((invalid) => {
      const displayData = invalid.originalData || invalid.data;
      reportMessage += `\n‚Ä¢ –°—Ç—Ä–æ–∫–∞ ${invalid.row}: "${
        displayData.length > 50
          ? displayData.substring(0, 50) + "..."
          : displayData
      }"`;
    });
    if (invalidRows.length > 5) {
      reportMessage += `\n‚Ä¢ ... –∏ –µ—â–µ ${invalidRows.length - 5} —Å—Ç—Ä–æ–∫`;
    }
    reportMessage += `\n\nüí° –°–æ–≤–µ—Ç: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç URL - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è vk.com/username, vk.com/id123456, –∏ –ø—Ä—è–º—ã–µ ID`;
  }

  showStatus("info", reportMessage);
}

function initProcessingStats(totalCount) {
  processingStats = {
    total: totalCount,
    processed: 0,
    errors: 0,
    duplicates: processingStats.duplicates,
    invalidUrls: processingStats.invalidUrls,
    resolveErrors: processingStats.resolveErrors,
    resolveAttempts: processingStats.resolveAttempts || 0,
    apiErrors: 0,
    friendsLoaded: processingStats.friendsLoaded,
  };
  updateStats();
}

function finishProcessing() {
  filteredResults = [...allResults];
  updateDisplay();
  displayAnalytics(allResults);

  const finalReport = `
üéâ –ê–Ω–∞–ª–∏–∑ –ª–∞–π–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${processingStats.total}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ª–∞–π–∫–µ—Ä–æ–≤: ${processingStats.processed}
‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL: ${processingStats.invalidUrls}
‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫ —Ä–µ–∑–æ–ª–≤–∞ username: ${processingStats.resolveAttempts || 0}
‚Ä¢ –û—à–∏–±–æ–∫ —Ä–µ–∑–æ–ª–≤–∞: ${processingStats.resolveErrors}
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${processingStats.duplicates}
‚Ä¢ API –æ—à–∏–±–æ–∫: ${processingStats.apiErrors}

‚úÖ –ò—Ç–æ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${allResults.length} –ª–∞–π–∫–µ—Ä–æ–≤
${
  friendsList.size > 0
    ? `\nüë• –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å ${processingStats.friendsLoaded} –¥—Ä—É–∑—å—è–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞`
    : ""
}
  `.trim();

  showStatus("success", finalReport);
  document.getElementById("exportButtons").style.display = "flex";
}

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function switchView(viewType) {
  currentView = viewType;

  const cardViewBtn = document.getElementById("cardViewBtn");
  const tableViewBtn = document.getElementById("tableViewBtn");
  const resultsContainer = document.getElementById("resultsContainer");
  const tableContainer = document.getElementById("tableContainer");

  if (viewType === "cards") {
    cardViewBtn.classList.add("active");
    tableViewBtn.classList.remove("active");
    resultsContainer.style.display = "block";
    tableContainer.style.display = "none";
  } else {
    tableViewBtn.classList.add("active");
    cardViewBtn.classList.remove("active");
    resultsContainer.style.display = "none";
    tableContainer.style.display = "block";
  }

  updateDisplay();
}

function filterResults(searchTerm) {
  if (!searchTerm.trim()) {
    filteredResults = [...allResults];
    return;
  }

  const term = searchTerm.toLowerCase();
  filteredResults = allResults.filter((user) => {
    return (
      user.first_name.toLowerCase().includes(term) ||
      user.last_name.toLowerCase().includes(term) ||
      (user.city && user.city.toLowerCase().includes(term)) ||
      user.id.toString().includes(term) ||
      user.profile_status.toLowerCase().includes(term) ||
      user.friend_status.toLowerCase().includes(term) ||
      (user.friend_list_name &&
        user.friend_list_name.toLowerCase().includes(term))
    );
  });
}

function sortResults(results) {
  return [...results].sort((a, b) => {
    let aVal = a[currentSort.field];
    let bVal = b[currentSort.field];

    if (currentSort.field === "name") {
      aVal = a.first_name + " " + a.last_name;
      bVal = b.first_name + " " + b.last_name;
    }

    if (aVal === null || aVal === undefined) aVal = "";
    if (bVal === null || bVal === undefined) bVal = "";

    let comparison = 0;
    if (typeof aVal === "string" && typeof bVal === "string") {
      comparison = aVal.localeCompare(bVal, "ru");
    } else {
      comparison = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
    }

    return currentSort.order === "desc" ? -comparison : comparison;
  });
}

function updateDisplay() {
  const groupBy = document.getElementById("groupBySelect").value;
  let displayResults = sortResults(filteredResults);

  if (currentView === "cards") {
    displayCardsView(displayResults, groupBy);
  } else {
    displayTableView(displayResults);
  }
}

function displayCardsView(results, groupBy) {
  const container = document.getElementById("resultsContainer");
  container.innerHTML = "";

  if (groupBy === "none") {
    const usersGrid = document.createElement("div");
    usersGrid.className = "users-grid";

    results.forEach((user) => {
      usersGrid.appendChild(createUserCard(user));
    });

    container.appendChild(usersGrid);
  } else {
    const groups = {};
    results.forEach((user) => {
      const groupKey = user[groupBy] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
      if (!groups[groupKey]) groups[groupKey] = [];
      groups[groupKey].push(user);
    });

    const sortedGroups = Object.entries(groups).sort(
      ([, a], [, b]) => b.length - a.length
    );

    sortedGroups.forEach(([groupName, users]) => {
      const citySection = document.createElement("div");
      citySection.className = "city-section";

      const cityHeader = document.createElement("div");
      cityHeader.className = "city-header";
      cityHeader.innerHTML = `
        <span class="city-name">${groupName}</span>
        <span class="city-count">${users.length} —á–µ–ª.</span>
      `;

      const usersGrid = document.createElement("div");
      usersGrid.className = "users-grid";

      users.forEach((user) => {
        usersGrid.appendChild(createUserCard(user));
      });

      citySection.appendChild(cityHeader);
      citySection.appendChild(usersGrid);
      container.appendChild(citySection);
    });
  }
}

function createUserCard(user) {
  const userCard = document.createElement("div");
  userCard.className = "user-card";

  let privacyClass = "privacy-open";
  if (user.profile_status === "–ó–∞–∫—Ä—ã—Ç—ã–π") privacyClass = "privacy-closed";
  else if (user.profile_status === "–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π")
    privacyClass = "privacy-partial";

  let friendBadge = "";
  if (user.friend_status !== "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
    let friendClass = "friend-unknown";
    if (user.friend_status === "–î—Ä—É–∑—å—è") friendClass = "friend-yes";
    else if (user.friend_status === "–ù–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π")
      friendClass = "friend-no";

    friendBadge = `<span class="friend-badge ${friendClass}">${user.friend_status}</span>`;
  }

  userCard.innerHTML = `
    <img src="${user.photo || "https://via.placeholder.com/50"}"
         alt="${user.first_name}"
         class="user-avatar"
         onerror="this.src='https://via.placeholder.com/50'">
    <div class="user-info">
        <h4><a href="${user.vk_url}" target="_blank">${user.first_name} ${
    user.last_name
  }</a> ${user.online ? "üü¢" : ""}</h4>
        <p>ID: ${user.id} | ${user.city || "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"}</p>
        ${
          user.last_seen
            ? `<p style="font-size: 0.85em; color: #666;">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${user.last_seen}</p>`
            : ""
        }
        ${
          user.csv_name
            ? `<p style="font-size: 0.8em; color: #888;">CSV: ${user.csv_name}</p>`
            : ""
        }
        ${
          user.friend_list_name
            ? `<p style="font-size: 0.8em; color: #28a745;">–í –¥—Ä—É–∑—å—è—Ö –∫–∞–∫: ${user.friend_list_name}</p>`
            : ""
        }
        <div style="margin-top: 8px;">
          <span class="privacy-badge ${privacyClass}">${
    user.profile_status
  }</span>
          ${friendBadge}
        </div>
    </div>
  `;
  return userCard;
}

function displayTableView(results) {
  const tbody = document.getElementById("resultsTableBody");
  tbody.innerHTML = "";

  results.forEach((user) => {
    const row = document.createElement("tr");

    let privacyClass = "privacy-open";
    if (user.profile_status === "–ó–∞–∫—Ä—ã—Ç—ã–π") privacyClass = "privacy-closed";
    else if (user.profile_status === "–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π")
      privacyClass = "privacy-partial";

    let friendClass = "friend-unknown";
    if (user.friend_status === "–î—Ä—É–∑—å—è") friendClass = "friend-yes";
    else if (user.friend_status === "–ù–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π")
      friendClass = "friend-no";

    row.innerHTML = `
      <td class="avatar-cell">
        <img src="${user.photo || "https://via.placeholder.com/40"}"
             alt="${user.first_name}"
             onerror="this.src='https://via.placeholder.com/40'">
      </td>
      <td class="name-cell">
        <a href="${user.vk_url}" target="_blank">${user.first_name} ${
      user.last_name
    }</a>
        ${
          user.csv_name
            ? `<br><small style="color: #888;">CSV: ${user.csv_name}</small>`
            : ""
        }
        ${
          user.friend_list_name
            ? `<br><small style="color: #28a745;">–í –¥—Ä—É–∑—å—è—Ö: ${user.friend_list_name}</small>`
            : ""
        }
      </td>
      <td>${user.id}</td>
      <td>
        ${
          user.online
            ? '<span style="color: #28a745;">üü¢ –û–Ω–ª–∞–π–Ω</span>'
            : '<span style="color: #6c757d;">‚ö´ –û—Ñ—Ñ–ª–∞–π–Ω</span>'
        }
        ${
          user.last_seen
            ? `<br><small style="color: #888;">${user.last_seen}</small>`
            : ""
        }
      </td>
      <td>${user.city || "–ù–µ —É–∫–∞–∑–∞–Ω"}</td>
      <td><span class="privacy-badge ${privacyClass}">${
      user.profile_status
    }</span></td>
      <td><span class="friend-badge ${friendClass}">${
      user.friend_status
    }</span></td>
    `;

    tbody.appendChild(row);
  });
}

function sortTable(field) {
  if (field === "name") field = "first_name";
  if (field === "avatar") return;

  if (currentSort.field === field) {
    currentSort.order = currentSort.order === "asc" ? "desc" : "asc";
  } else {
    currentSort.field = field;
    currentSort.order = "asc";
  }

  document.getElementById("sortBySelect").value = field;
  document.getElementById("sortOrderSelect").value = currentSort.order;

  updateDisplay();
}

// –≠–∫—Å–ø–æ—Ä—Ç
function exportResults(format) {
  if (format === "csv") {
    exportToCSV();
  } else if (format === "xlsx") {
    exportToXLSX();
  }
}

function exportToCSV() {
  let csv =
    "–ò–º—è,–§–∞–º–∏–ª–∏—è,ID,–û–Ω–ª–∞–π–Ω,–ì–æ—Ä–æ–¥,–ü–æ—Å–ª–µ–¥–Ω–∏–π_–≤–∏–∑–∏—Ç,–°—Ç–∞—Ç—É—Å_–ø—Ä–æ—Ñ–∏–ª—è,–°—Ç–∞—Ç—É—Å_–¥—Ä—É–∂–±—ã,–ò–º—è_–≤_—Å–ø–∏—Å–∫–µ_–¥—Ä—É–∑–µ–π,–°—Å—ã–ª–∫–∞,–§–æ—Ç–æ\n";

  filteredResults.forEach((user) => {
    const onlineStatus = user.online ? "–û–Ω–ª–∞–π–Ω" : "–û—Ñ—Ñ–ª–∞–π–Ω";
    csv += `"${user.first_name}","${user.last_name}",${
      user.id
    },"${onlineStatus}","${user.city || "–ù–µ —É–∫–∞–∑–∞–Ω"}","${
      user.last_seen || ""
    }","${user.profile_status}","${user.friend_status}","${
      user.friend_list_name || ""
    }","${user.vk_url}","${user.photo || ""}"\n`;
  });

  const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
  downloadFile(
    blob,
    `vk_users_analysis_${new Date().toISOString().split("T")[0]}.csv`
  );
}

function exportToXLSX() {
  const ws_data = [
    [
      "–ò–º—è",
      "–§–∞–º–∏–ª–∏—è",
      "ID",
      "–û–Ω–ª–∞–π–Ω",
      "–ì–æ—Ä–æ–¥",
      "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç",
      "–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è",
      "–°—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã",
      "–ò–º—è –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π",
      "–°—Å—ã–ª–∫–∞",
      "–§–æ—Ç–æ",
    ],
  ];

  filteredResults.forEach((user) => {
    const onlineStatus = user.online ? "–û–Ω–ª–∞–π–Ω" : "–û—Ñ—Ñ–ª–∞–π–Ω";
    ws_data.push([
      user.first_name,
      user.last_name,
      user.id,
      onlineStatus,
      user.city || "–ù–µ —É–∫–∞–∑–∞–Ω",
      user.last_seen || "",
      user.profile_status,
      user.friend_status,
      user.friend_list_name || "",
      user.vk_url,
      user.photo || "",
    ]);
  });

  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.aoa_to_sheet(ws_data);

  const colWidths = [];
  for (let i = 0; i < ws_data[0].length; i++) {
    let maxLength = 0;
    for (let j = 0; j < ws_data.length; j++) {
      if (ws_data[j][i]) {
        maxLength = Math.max(maxLength, ws_data[j][i].toString().length);
      }
    }
    colWidths.push({ width: Math.min(maxLength + 2, 50) });
  }
  ws["!cols"] = colWidths;

  XLSX.utils.book_append_sheet(wb, ws, "VK Users");
  XLSX.writeFile(
    wb,
    `vk_users_analysis_${new Date().toISOString().split("T")[0]}.xlsx`
  );
}

function downloadFile(blob, filename) {
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = filename;
  link.click();
}

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
function displayAnalytics(users) {
  document.getElementById("analyticsSection").style.display = "block";

  displayCityAnalytics(users);
  displayProfileAnalytics(users);
  displayFriendshipAnalytics(users);
}

function displayCityAnalytics(users) {
  const cityStats = {};

  users.forEach((user) => {
    const city = user.city || "–ù–µ —É–∫–∞–∑–∞–Ω";
    cityStats[city] = (cityStats[city] || 0) + 1;
  });

  const container = document.getElementById("cityStats");
  container.innerHTML = "";

  const sortedCities = Object.entries(cityStats)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 15);

  const totalDiv = document.createElement("div");
  totalDiv.innerHTML = `
    <div style="background: #e9ecef; padding: 12px; border-radius: 8px; margin-bottom: 15px; text-align: center;">
      <strong>–í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: ${Object.keys(cityStats).length}</strong><br>
      <small>–ü–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–ø-15 –≥–æ—Ä–æ–¥–æ–≤</small>
    </div>
  `;
  container.appendChild(totalDiv);

  sortedCities.forEach(([city, count]) => {
    const percentage = ((count / users.length) * 100).toFixed(1);
    const cityDiv = document.createElement("div");
    cityDiv.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f0f0f0;">
        <span style="font-weight: 500;">${city}</span>
        <span style="font-weight: bold; color: #007bff;">${count} (${percentage}%)</span>
      </div>
    `;
    container.appendChild(cityDiv);
  });
}

function displayProfileAnalytics(users) {
  const profileStats = {};
  users.forEach((user) => {
    const status = user.profile_status;
    profileStats[status] = (profileStats[status] || 0) + 1;
  });

  const container = document.getElementById("profileStats");
  container.innerHTML = "";

  Object.entries(profileStats).forEach(([status, count]) => {
    const percentage = ((count / users.length) * 100).toFixed(1);
    const statusDiv = document.createElement("div");
    statusDiv.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f0f0f0;">
        <span style="font-weight: 500;">${status}</span>
        <span style="font-weight: bold; color: #007bff;">${count} (${percentage}%)</span>
      </div>
    `;
    container.appendChild(statusDiv);
  });
}

function displayFriendshipAnalytics(users) {
  const friendStats = {};
  let totalFriends = 0;
  let totalChecked = 0;
  let notInList = 0;
  let unknown = 0;

  users.forEach((user) => {
    const status = user.friend_status;
    friendStats[status] = (friendStats[status] || 0) + 1;

    if (status === "–î—Ä—É–∑—å—è") {
      totalFriends++;
      totalChecked++;
    } else if (status === "–ù–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π") {
      notInList++;
      totalChecked++;
    } else if (status === "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
      unknown++;
    }
  });

  const container = document.getElementById("friendshipStats");
  container.innerHTML = "";

  if (totalChecked > 0) {
    const summaryDiv = document.createElement("div");
    summaryDiv.innerHTML = `
      <div style="background: #e8f5e8; padding: 15px; border-radius: 10px; margin-bottom: 20px;">
        <h4 style="color: #28a745; margin-bottom: 10px;">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–π–∫–æ–≤:</h4>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9em;">
          <div><strong>üë• –õ–∞–π–∫–æ–≤ –æ—Ç –¥—Ä—É–∑–µ–π:</strong> <span style="color: #28a745; font-weight: bold;">${totalFriends}</span></div>
          <div><strong>üìã –í—Å–µ–≥–æ –ª–∞–π–∫–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:</strong> ${totalChecked}</div>
          <div><strong>üéØ % –ª–∞–π–∫–æ–≤ –æ—Ç –¥—Ä—É–∑–µ–π:</strong> <span style="color: #007bff; font-weight: bold;">${
            totalChecked > 0
              ? ((totalFriends / totalChecked) * 100).toFixed(1)
              : 0
          }%</span></div>
          <div><strong>‚ùå –õ–∞–π–∫–æ–≤ –æ—Ç –Ω–µ-–¥—Ä—É–∑–µ–π:</strong> ${notInList}</div>
          <div><strong>‚ùì –ù–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å:</strong> ${unknown}</div>
          <div><strong>üìÅ –†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:</strong> ${
            friendsList.size
          }</div>
        </div>
      </div>
    `;
    container.appendChild(summaryDiv);
  } else if (friendsList.size > 0) {
    const summaryDiv = document.createElement("div");
    summaryDiv.innerHTML = `
      <div style="background: #fff3cd; padding: 15px; border-radius: 10px; margin-bottom: 20px;">
        <h4 style="color: #856404; margin-bottom: 10px;">üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω:</h4>
        <div style="font-size: 0.9em;">
          <div><strong>üìÅ –†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:</strong> ${friendsList.size}</div>
          <div><strong>‚ö†Ô∏è –õ–∞–π–∫–µ—Ä—ã –µ—â—ë –Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã</strong></div>
        </div>
      </div>
    `;
    container.appendChild(summaryDiv);
  }

  const sortedStats = Object.entries(friendStats).sort(([, a], [, b]) => b - a);

  sortedStats.forEach(([status, count]) => {
    const percentage = ((count / users.length) * 100).toFixed(1);
    const statusDiv = document.createElement("div");

    let statusColor = "#6c757d";
    let icon = "üë§";

    if (status === "–î—Ä—É–∑—å—è") {
      statusColor = "#28a745";
      icon = "‚úÖ";
    } else if (status === "–ù–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π") {
      statusColor = "#6c757d";
      icon = "‚ùå";
    } else if (status === "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
      statusColor = "#6c757d";
      icon = "‚ùì";
    }

    statusDiv.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #f0f0f0;">
        <span style="font-weight: 500;">${icon} ${status}</span>
        <span style="font-weight: bold; color: ${statusColor};">${count} (${percentage}%)</span>
      </div>
    `;
    container.appendChild(statusDiv);
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function updateProgress() {
  const percent = (processingStats.processed / processingStats.total) * 100;
  document.getElementById("progressFill").style.width = percent + "%";
  document.getElementById(
    "progressText"
  ).textContent = `${processingStats.processed}/${processingStats.total}`;
}

function updateStats() {
  const updateElement = (id, value) => {
    const element = document.getElementById(id);
    if (element) {
      // –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ ‚ùå –∏–ª–∏ ‚úï
      element.textContent = value.toString();
      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫—Ä–µ—Å—Ç–∏–∫–∏
      element.removeAttribute("data-value");
      element.className = element.className.replace(
        /\b(error|zero|low|failed)\b/g,
        ""
      );
    }
  };

  updateElement("totalUsers", processingStats.total);
  updateElement("processedUsers", processingStats.processed);

  // –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const cities = new Set();
  allResults.forEach((user) => {
    const city = user.city || "–ù–µ —É–∫–∞–∑–∞–Ω";
    cities.add(city);
  });
  updateElement("uniqueCities", cities.size);

  // –°—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
  const openProfiles = allResults.filter(
    (user) => user.profile_status === "–û—Ç–∫—Ä—ã—Ç—ã–π"
  ).length;
  updateElement("openProfiles", openProfiles);

  // –°—á–∏—Ç–∞–µ–º –¥—Ä—É–∑–µ–π —Å—Ä–µ–¥–∏ –ª–∞–π–∫–µ—Ä–æ–≤
  const friendsInLikes = allResults.filter(
    (user) => user.friend_status === "–î—Ä—É–∑—å—è"
  ).length;
  updateElement("friendsInLikes", friendsInLikes);
}

function showStatus(type, message) {
  const status = document.getElementById("status");
  status.className = `status ${type}`;
  status.textContent = message;
  status.style.display = "block";
}

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
